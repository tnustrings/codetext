begin a file named foo.py and alias it as foo.

<<foo.py: foo
   ooh, baby you're a fool to py
   <<bar>>
>>

chunk names are noted as paths, e.g. foo/bar for the chunk bar in
foo. we put some code into the foo/bar chunk.

<<foo/bar
   my bar code
   <<baz>>
>>

we can use relative paths and reference the previous chunk via .

<<./baz
   my baz code
>>

this would be baz' absolute path:

<<foo/bar/baz
   and it makes me wonder why
>>

when we don't give a path we append to the previous chunk.

<<
   still my baz code.
>>

if there's a loop etc, and we would like the next unnamed chunk in the
text to be inside the loop instead of appended to the end of the chunk
we can say <<.>>:

<<
   for i = 0; i < n; i++ {
      <<.>>
   }
>>

then the following chunk will be put where the <<.>> tag is and not to
the end of the chunk.

<<
   inside the loop
>>

go back via ..

<<..
   appending to the foo/bar/baz code again
>>

we open a second file, named zoo.py:

<<zoo.py: zoo
  welcome to the zoo
>>

if there's only one output file in the codetext and if you don't give
this file an alias, you leave out its name when referring to child
chunks, otherwise you include it like above.
